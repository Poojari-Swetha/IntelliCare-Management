// <auto-generated />
using System;
using IntelliCareManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntelliCareManagement.Infrastructure.Migrations
{
    [DbContext(typeof(IntelliCareDbContext))]
    partial class IntelliCareDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime>("Date_Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("QueuePosition")
                        .HasColumnType("int");

                    b.Property<string>("QueueStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Consultation", b =>
                {
                    b.Property<int>("ConsultationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationID"));

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("ConsultationID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentID"));

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("DocumentID");

                    b.HasIndex("PatientID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceID"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClaimStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InvoiceID");

                    b.HasIndex("PatientID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.PatientProfile", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientID");

                    b.ToTable("PatientProfiles");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"));

                    b.Property<int>("ConsultationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryETA")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("ConsultationID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<DateTime?>("GeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Metrics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PredictionDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("DoctorID")
                        .IsUnique()
                        .HasFilter("[DoctorID] IS NOT NULL");

                    b.HasIndex("PatientID")
                        .IsUnique()
                        .HasFilter("[PatientID] IS NOT NULL");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.UserSecurity", b =>
                {
                    b.Property<int>("SecurityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityID"));

                    b.Property<string>("APIToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOTPVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTokenActive")
                        .HasColumnType("bit");

                    b.Property<string>("OTPCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OTPExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SecurityID");

                    b.HasIndex("UserID");

                    b.ToTable("UserSecurities");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("IntelliCareManagement.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntelliCareManagement.Domain.Entities.PatientProfile", "PatientProfile")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Consultation", b =>
                {
                    b.HasOne("IntelliCareManagement.Domain.Entities.Appointment", "Appointment")
                        .WithMany("Consultations")
                        .HasForeignKey("AppointmentID");

                    b.HasOne("IntelliCareManagement.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Consultations")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntelliCareManagement.Domain.Entities.PatientProfile", "PatientProfile")
                        .WithMany("Consultations")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Document", b =>
                {
                    b.HasOne("IntelliCareManagement.Domain.Entities.PatientProfile", "PatientProfile")
                        .WithMany("Documents")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("IntelliCareManagement.Domain.Entities.PatientProfile", "PatientProfile")
                        .WithMany("Invoices")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("IntelliCareManagement.Domain.Entities.Consultation", "Consultation")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ConsultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.User", b =>
                {
                    b.HasOne("IntelliCareManagement.Domain.Entities.Doctor", "Doctor")
                        .WithOne("User")
                        .HasForeignKey("IntelliCareManagement.Domain.Entities.User", "DoctorID");

                    b.HasOne("IntelliCareManagement.Domain.Entities.PatientProfile", "PatientProfile")
                        .WithOne("User")
                        .HasForeignKey("IntelliCareManagement.Domain.Entities.User", "PatientID");

                    b.HasOne("IntelliCareManagement.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("PatientProfile");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.UserSecurity", b =>
                {
                    b.HasOne("IntelliCareManagement.Domain.Entities.User", "User")
                        .WithMany("UserSecurities")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Consultation", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Consultations");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.PatientProfile", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Consultations");

                    b.Navigation("Documents");

                    b.Navigation("Invoices");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("IntelliCareManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("UserSecurities");
                });
#pragma warning restore 612, 618
        }
    }
}
